generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  first_name   String        @db.VarChar(50)
  last_name    String        @db.VarChar(50)
  username     String        @unique @db.VarChar(30)
  email        String        @unique @db.VarChar(100)
  password     String        @db.VarChar(100)
  currency     String        @default("INR")
  incomes      Income[]
  budgets      Budget[]
  transactions Transaction[]
  audits       AuditLog[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model Income {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  source     String   @db.VarChar(100) // Job, Freelancing, Rental Income, etc.
  amount     Float
  tax        Float // Tax per income source
  netAmount  Float // Salary after tax deduction
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userId])
}

model Budget {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  type         PayPeriod
  totalLimit   Float         @default(0.0)
  startDate    DateTime      @default(now())
  endDate      DateTime?
  expenditures Expenditure[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?

  @@index([userId])
}

model Expenditure {
  id         String    @id @default(uuid())
  budgetId   String
  budget     Budget    @relation(fields: [budgetId], references: [id])
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  cost       Float
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([budgetId])
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique
  typeId       String
  type         BudgetType    @relation(fields: [typeId], references: [id])
  expenditures Expenditure[]
  transactions Transaction[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model BudgetType {
  id         String     @id @default(uuid())
  name       String     @unique
  categories Category[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Transaction {
  id         String          @id @default(uuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  amount     Float
  type       TransactionType
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  date       DateTime        @default(now())
  notes      String?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  deleted_at DateTime?

  @@index([userId, date])
  @@index([categoryId])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  action     String   @db.VarChar(50) // e.g., CREATE, UPDATE, DELETE
  entityType String   @db.VarChar(50) // e.g., User, Budget, Transaction
  entityId   String   @db.VarChar(50)
  oldData    Json?
  newData    Json?
  timestamp  DateTime @default(now())
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?  @db.VarChar(255)

  @@index([userId])
  @@index([entityType])
  @@index([timestamp])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PayPeriod {
  WEEKLY
  BIWEEKLY
  MONTHLY
}
